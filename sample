import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models, applications
import cv2
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os

# Model Training
def create_model(input_shape):
    base_model = applications.EfficientNetB3(weights='imagenet', include_top=False, input_shape=input_shape)
    x = layers.GlobalAveragePooling2D()(base_model.output)
    x = layers.Dense(256, activation='relu')(x)
    x = layers.Dropout(0.5)(x)
    output = layers.Dense(1, activation='sigmoid')(x)
    model = models.Model(inputs=base_model.input, outputs=output)

    for layer in base_model.layers:
        layer.trainable = False

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

def train_model(X_train, y_train, epochs=20, batch_size=32):
    input_shape = X_train.shape[1:]
    model = create_model(input_shape)
    model.fit(X_train, y_train, epochs=epochs, validation_split=0.2, batch_size=batch_size)
    return model

# Improved Video Processing
def preprocess_frame(frame):
    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    frame = cv2.resize(frame, (300, 300))
    frame = applications.efficientnet.preprocess_input(frame)
    return frame

def detect_faces(frame):
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)
    return faces

def process_video(video_path):
    cap = cv2.VideoCapture(video_path)
    frames = []
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        faces = detect_faces(frame)
        for (x, y, w, h) in faces:
            face = frame[y:y+h, x:x+w]
            face = preprocess_frame(face)
            frames.append(face)
    cap.release()
    return np.array(frames)

# Deep Fake Detection
def detect_deepfake(video_path, model):
    processed_frames = process_video(video_path)
    if len(processed_frames) == 0:
        print("No faces detected in the video.")
        return False
    predictions = model.predict(processed_frames)
    deepfake_score = np.mean(predictions)
    print(f"Deepfake probability: {deepfake_score:.2f}")
    return deepfake_score > 0.5

# Email Alert System
def send_alert(recipient_email):
    sender_email = os.environ.get('SENDER_EMAIL')
    app_password = os.environ.get('APP_PASSWORD')

    if not sender_email or not app_password:
        print("Error: Email credentials not set in environment variables.")
        return

    message = MIMEMultipart("alternative")
    message["Subject"] = "Deep Fake Alert"
    message["From"] = sender_email
    message["To"] = recipient_email

    text = """
    A deep fake video using your face has been detected.

    Please choose an action:
    1. Report to Social Media Customer Care
    2. Report to Cybercrime Authorities
    """

    html = """
    <html>
    <body>
        <p>A deep fake video using your face has been detected.</p>
        <p>Please choose an action:</p>
        <a href="http://example.com/report_social_media">
            <button>Report to Social Media Customer Care</button>
        </a>
        <a href="http://example.com/report_cybercrime">
            <button>Report to Cybercrime Authorities</button>
        </a>
    </body>
    </html>
    """

    part1 = MIMEText(text, "plain")
    part2 = MIMEText(html, "html")

    message.attach(part1)
    message.attach(part2)

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(sender_email, app_password)
            server.sendmail(sender_email, recipient_email, message.as_string())
        print("Alert sent successfully!")
    except Exception as e:
        print(f"Error sending email: {str(e)}")




# Main execution
if __name__ == "__main__":
    # Set environment variables for email credentials
    os.environ['SENDER_EMAIL'] = ''
    os.environ['APP_PASSWORD'] = ''

    # Load your training data
    # Replace this with your actual data loading function
    X_train = np.random.rand(1000, 300, 300, 3)
    y_train = np.random.randint(2, size=(1000, 1))

    model = train_model(X_train, y_train, epochs=20, batch_size=32)

    # Save the trained model
    model.save('deepfake_detection_model.h5')

    # Load the saved model
    model = tf.keras.models.load_model('deepfake_detection_model.h5')

    video_path = "/content/video.mp4"
    is_deepfake = detect_deepfake(video_path, model)

    if is_deepfake:
        send_alert("")
    else:
        print("No deep fake detected.")
